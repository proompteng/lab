# syntax=docker/dockerfile:1.6
FROM ghcr.io/openai/codex-universal:latest

ARG ARGO_VERSION=v3.6.3
ARG KUBECONFORM_VERSION=v0.6.7
ARG TARGETARCH=arm64
ARG ZIG_VERSION=0.15.2
ARG ZLS_VERSION=0.15.0
ARG TEMPORAL_SDK_CORE_REF=master
ARG TEMPORAL_SDK_TYPESCRIPT_REF=main
ARG CODEX_AUTH_CHECKSUM=unspecified

ENV DEBIAN_FRONTEND=noninteractive \
    WORKSPACE=/workspace \
    WORKTREE=/workspace/lab \
    PLAN_OUTPUT_PATH=/workspace/lab/.codex-plan-output.md \
    IMPLEMENTATION_OUTPUT_PATH=/workspace/lab/.codex-implementation.log \
    GIT_TERMINAL_PROMPT=0 \
    BUN_INSTALL=/usr/local \
    TEMPORAL_VENDOR_ROOT=/opt/vendor

RUN apt-get update \
    && apt-get install -y --no-install-recommends git gh jq python3 curl xz-utils protobuf-compiler libprotobuf-dev \
    && rm -rf /var/lib/apt/lists/*

RUN set -eux; \
    ARCH=${TARGETARCH:-arm64}; \
    case "${ARCH}" in \
      amd64|arm64) \
        ;; \
      *) \
        echo "Unsupported TARGETARCH: ${ARCH}" >&2; \
        exit 1; \
        ;; \
    esac; \
    ARGO_ARCHIVE="/tmp/argo-linux-${ARCH}.gz"; \
    KUBECONFORM_ARCHIVE="/tmp/kubeconform-linux-${ARCH}.tar.gz"; \
    curl -fsSL -o "${ARGO_ARCHIVE}" "https://github.com/argoproj/argo-workflows/releases/download/${ARGO_VERSION}/argo-linux-${ARCH}.gz"; \
    gunzip -c "${ARGO_ARCHIVE}" > /tmp/argo; \
    install -m 0755 /tmp/argo /usr/local/bin/argo; \
    rm -f "${ARGO_ARCHIVE}" /tmp/argo; \
    curl -fsSL -o "${KUBECONFORM_ARCHIVE}" "https://github.com/yannh/kubeconform/releases/download/${KUBECONFORM_VERSION}/kubeconform-linux-${ARCH}.tar.gz"; \
    tar -xzf "${KUBECONFORM_ARCHIVE}" -C /tmp kubeconform; \
    install -m 0755 /tmp/kubeconform /usr/local/bin/kubeconform; \
    rm -f "${KUBECONFORM_ARCHIVE}" /tmp/kubeconform

RUN set -eux; \
    ARCH="${TARGETARCH:-arm64}"; \
    case "${ARCH}" in \
      amd64) \
        ZIG_ARCH="x86_64"; \
        ZLS_ARCH="x86_64"; \
        ;; \
      arm64) \
        ZIG_ARCH="aarch64"; \
        ZLS_ARCH="aarch64"; \
        ;; \
      *) \
        echo "Unsupported TARGETARCH: ${ARCH}" >&2; \
        exit 1; \
        ;; \
    esac; \
    ZIG_OS="linux"; \
    ZIG_URL="https://ziglang.org/download/${ZIG_VERSION}/zig-${ZIG_ARCH}-${ZIG_OS}-${ZIG_VERSION}.tar.xz"; \
    ZIG_TMPDIR="$(mktemp -d)"; \
    curl -fsSL "${ZIG_URL}" | tar -xJf - -C "${ZIG_TMPDIR}"; \
    install -d /opt/zig; \
    rm -rf "/opt/zig/zig-${ZIG_ARCH}-${ZIG_OS}-${ZIG_VERSION}"; \
    mv "${ZIG_TMPDIR}/zig-${ZIG_ARCH}-${ZIG_OS}-${ZIG_VERSION}" /opt/zig/; \
    ln -sf "/opt/zig/zig-${ZIG_ARCH}-${ZIG_OS}-${ZIG_VERSION}/zig" /usr/local/bin/zig; \
    rm -rf "${ZIG_TMPDIR}"; \
    ZLS_URL="https://builds.zigtools.org/zls-${ZLS_ARCH}-linux-${ZLS_VERSION}.tar.xz"; \
    ZLS_TMPDIR="$(mktemp -d)"; \
    curl -fsSL "${ZLS_URL}" | tar -xJf - -C "${ZLS_TMPDIR}"; \
    install -m 0755 "${ZLS_TMPDIR}/zls" /usr/local/bin/zls; \
    rm -rf "${ZLS_TMPDIR}"

RUN curl -fsSL https://bun.sh/install | bash \
    && mkdir -p /opt/homebrew/bin \
    && ln -s /usr/local/bin/bun /opt/homebrew/bin/bun

RUN bash -lc 'source /root/.nvm/nvm.sh && npm install -g @openai/codex@latest && ln -sf "$(command -v codex)" /usr/local/bin/codex'

RUN set -eux; \
    install -d /opt/vendor; \
    git clone --depth 1 --branch "${TEMPORAL_SDK_CORE_REF}" https://github.com/temporalio/sdk-core.git /opt/vendor/sdk-core; \
    git clone --depth 1 --branch "${TEMPORAL_SDK_TYPESCRIPT_REF}" https://github.com/temporalio/sdk-typescript.git /opt/vendor/sdk-typescript

RUN mkdir -p "$WORKSPACE" /root/.codex

# Copy Codex auth secret during build (requires BuildKit secret)
RUN --mount=type=secret,id=codex_auth,target=/tmp/codex_auth.json \
    cp /tmp/codex_auth.json /root/.codex/auth.json \
    && printf '%s\n' "${CODEX_AUTH_CHECKSUM}" > /root/.codex/auth.checksum

COPY apps/froussard/scripts/codex-config-container.toml /root/.codex/config.toml

# Authenticate gh using provided token and wire git credential helper
RUN --mount=type=secret,id=github_token,target=/tmp/gh_token \
    gh auth login --with-token < /tmp/gh_token \
    && gh auth setup-git

RUN git config --global user.name "codex-automation" \
    && git config --global user.email "codex-automation@users.noreply.github.com"

COPY apps/froussard/src/codex/cli/codex-bootstrap.ts /usr/local/bin/codex-bootstrap
COPY apps/froussard/src/codex/cli/codex-plan.ts /usr/local/bin/codex-plan
COPY apps/froussard/src/codex/cli/codex-implement.ts /usr/local/bin/codex-implement
COPY apps/froussard/src/codex/cli/lib /usr/local/bin/lib
RUN chmod +x /usr/local/bin/codex-bootstrap /usr/local/bin/codex-plan /usr/local/bin/codex-implement

WORKDIR /workspace
ENTRYPOINT ["/usr/local/bin/codex-bootstrap"]
CMD ["bash"]
